// Code generated by "callbackgen -type KLineStrategy"; DO NOT EDIT.

package strategy

import (
	"github.com/c9s/bbgo/pkg/bbgo/types"
	"reflect"
)

func (strategy *KLineStrategy) OnDetect(cb func(ok bool, reason string, detector *KLineDetector, kline types.KLineOrWindow)) {
	strategy.detectCallbacks = append(strategy.detectCallbacks, cb)
}

func (strategy *KLineStrategy) EmitDetect(ok bool, reason string, detector *KLineDetector, kline types.KLineOrWindow) {
	for _, cb := range strategy.detectCallbacks {
		cb(ok, reason, detector, kline)
	}
}

func (strategy *KLineStrategy) RemoveOnDetect(needle func(ok bool, reason string, detector *KLineDetector, kline types.KLineOrWindow)) (found bool) {

	var newcallbacks []func(ok bool, reason string, detector *KLineDetector, kline types.KLineOrWindow)
	var fp = reflect.ValueOf(needle).Pointer()
	for _, cb := range strategy.detectCallbacks {
		if fp == reflect.ValueOf(cb).Pointer() {
			found = true
		} else {
			newcallbacks = append(newcallbacks, cb)
		}
	}

	if found {
		strategy.detectCallbacks = newcallbacks
	}

	return found
}
